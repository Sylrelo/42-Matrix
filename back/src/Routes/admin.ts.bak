import { exec } from "child_process";
import { FastifyReply, FastifyRequest } from "fastify";
import security from "./security";

const execPromise = (command: string) => {
    return new Promise((resolve, reject) => {
        exec(command, (err, stdout, stderr) => {
            if (err != null) {
                reject(stderr);
            }
            console.log({ err, stdout, stderr });
            resolve(stdout);
        });
    });
};

export const adminRoute = async (request: FastifyRequest, reply: FastifyReply) => {
    try {
        // Only "slopez" authorized for now
        await security.checkAuth(request, reply, [40737]);

        //@ts-ignore
        const type = request.query?.type;
        const results = [];

        if (type === "pull") {
            results.push(await execPromise("eval $(ssh-agent) && git reset --hard origin/master && git pull"));
        }

        if (type === "back") {
            results.push(await execPromise("yarn install && yarn run migrate && yarn build"));
            results.push(await execPromise("pm2 restart 3"));
        }

        if (type === "front") {
            results.push(
                await execPromise('cd ../front && yarn install && NODE_OPTIONS="--max-old-space-size=4096" yarn build')
            );
        }

        reply.send(results);
    } catch (error) {
        console.error(error);
    }
};
